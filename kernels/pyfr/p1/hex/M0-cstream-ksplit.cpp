inline __device__ double make_zero()
{ return 0; }

__global__ void
gimmik_mm_24x8(const double* __restrict__ b, double* __restrict__ c)
{
    const int n = 1000000;
    const int ldb = 1000000;
    const int ldc = 1000000;
    const int i = blockDim.x*blockIdx.x + threadIdx.x;

    double cv[12], bv[4], dotp;
    __shared__ double csub[1][24][32];

    if (i >= n)
        return;

    if (threadIdx.y == 0)
    {
        bv[0] = __ldcg(b + i + 0*ldb); 
        bv[2] = __ldcg(b + i + 4*ldb); 
        dotp = (1.366025403784439*bv[0] + -0.3660254037844385*bv[2]);
        cv[0] = dotp;
        dotp = make_zero();
        csub[0][1][threadIdx.x] = dotp;
        bv[1] = __ldcg(b + i + 2*ldb); 
        bv[3] = __ldcg(b + i + 6*ldb); 
        dotp = (1.366025403784439*bv[1] + -0.3660254037844385*bv[3]);
        cv[1] = dotp;
        dotp = make_zero();
        csub[0][3][threadIdx.x] = dotp;
        dotp = (1.366025403784439*bv[0] + -0.3660254037844385*bv[1]);
        cv[2] = dotp;
        dotp = make_zero();
        csub[0][5][threadIdx.x] = dotp;
        dotp = (1.366025403784439*bv[2] + -0.3660254037844385*bv[3]);
        cv[3] = dotp;
        dotp = make_zero();
        csub[0][7][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[0]);
        cv[4] = dotp;
        dotp = (-0.3660254037844385*bv[1]);
        csub[0][9][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[2]);
        cv[5] = dotp;
        dotp = (-0.3660254037844385*bv[3]);
        csub[0][11][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[0] + 1.366025403784439*bv[1]);
        cv[6] = dotp;
        dotp = make_zero();
        csub[0][13][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[2] + 1.366025403784439*bv[3]);
        cv[7] = dotp;
        dotp = make_zero();
        csub[0][15][threadIdx.x] = dotp;
        dotp = (1.366025403784439*bv[0]);
        cv[8] = dotp;
        dotp = (1.366025403784439*bv[1]);
        csub[0][17][threadIdx.x] = dotp;
        dotp = (1.366025403784439*bv[2]);
        cv[9] = dotp;
        dotp = (1.366025403784439*bv[3]);
        csub[0][19][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[0] + 1.366025403784439*bv[2]);
        cv[10] = dotp;
        dotp = make_zero();
        csub[0][21][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[1] + 1.366025403784439*bv[3]);
        cv[11] = dotp;
        dotp = make_zero();
        csub[0][23][threadIdx.x] = dotp;
        __barrier_sync(0);
        dotp = cv[0] + csub[0][0][threadIdx.x];
        __stcg(c + i + 0*ldc, dotp);
        dotp = cv[1] + csub[0][2][threadIdx.x];
        __stcg(c + i + 2*ldc, dotp);
        dotp = cv[2] + csub[0][4][threadIdx.x];
        __stcg(c + i + 4*ldc, dotp);
        dotp = cv[3] + csub[0][6][threadIdx.x];
        __stcg(c + i + 6*ldc, dotp);
        dotp = cv[4] + csub[0][8][threadIdx.x];
        __stcg(c + i + 8*ldc, dotp);
        dotp = cv[5] + csub[0][10][threadIdx.x];
        __stcg(c + i + 10*ldc, dotp);
        dotp = cv[6] + csub[0][12][threadIdx.x];
        __stcg(c + i + 12*ldc, dotp);
        dotp = cv[7] + csub[0][14][threadIdx.x];
        __stcg(c + i + 14*ldc, dotp);
        dotp = cv[8] + csub[0][16][threadIdx.x];
        __stcg(c + i + 16*ldc, dotp);
        dotp = cv[9] + csub[0][18][threadIdx.x];
        __stcg(c + i + 18*ldc, dotp);
        dotp = cv[10] + csub[0][20][threadIdx.x];
        __stcg(c + i + 20*ldc, dotp);
        dotp = cv[11] + csub[0][22][threadIdx.x];
        __stcg(c + i + 22*ldc, dotp);
        __barrier_sync(0);
    }
    if (threadIdx.y == 1)
    {
        dotp = make_zero();
        csub[0][0][threadIdx.x] = dotp;
        bv[0] = __ldcg(b + i + 1*ldb); 
        bv[2] = __ldcg(b + i + 5*ldb); 
        dotp = (1.366025403784439*bv[0] + -0.3660254037844385*bv[2]);
        cv[0] = dotp;
        dotp = make_zero();
        csub[0][2][threadIdx.x] = dotp;
        bv[1] = __ldcg(b + i + 3*ldb); 
        bv[3] = __ldcg(b + i + 7*ldb); 
        dotp = (1.366025403784439*bv[1] + -0.3660254037844385*bv[3]);
        cv[1] = dotp;
        dotp = make_zero();
        csub[0][4][threadIdx.x] = dotp;
        dotp = (1.366025403784439*bv[0] + -0.3660254037844385*bv[1]);
        cv[2] = dotp;
        dotp = make_zero();
        csub[0][6][threadIdx.x] = dotp;
        dotp = (1.366025403784439*bv[2] + -0.3660254037844385*bv[3]);
        cv[3] = dotp;
        dotp = (1.366025403784439*bv[0]);
        csub[0][8][threadIdx.x] = dotp;
        dotp = (1.366025403784439*bv[1]);
        cv[4] = dotp;
        dotp = (1.366025403784439*bv[2]);
        csub[0][10][threadIdx.x] = dotp;
        dotp = (1.366025403784439*bv[3]);
        cv[5] = dotp;
        dotp = make_zero();
        csub[0][12][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[0] + 1.366025403784439*bv[1]);
        cv[6] = dotp;
        dotp = make_zero();
        csub[0][14][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[2] + 1.366025403784439*bv[3]);
        cv[7] = dotp;
        dotp = (-0.3660254037844385*bv[0]);
        csub[0][16][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[1]);
        cv[8] = dotp;
        dotp = (-0.3660254037844385*bv[2]);
        csub[0][18][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[3]);
        cv[9] = dotp;
        dotp = make_zero();
        csub[0][20][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[0] + 1.366025403784439*bv[2]);
        cv[10] = dotp;
        dotp = make_zero();
        csub[0][22][threadIdx.x] = dotp;
        dotp = (-0.3660254037844385*bv[1] + 1.366025403784439*bv[3]);
        cv[11] = dotp;
        __barrier_sync(0);
        dotp = cv[0] + csub[0][1][threadIdx.x];
        __stcg(c + i + 1*ldc, dotp);
        dotp = cv[1] + csub[0][3][threadIdx.x];
        __stcg(c + i + 3*ldc, dotp);
        dotp = cv[2] + csub[0][5][threadIdx.x];
        __stcg(c + i + 5*ldc, dotp);
        dotp = cv[3] + csub[0][7][threadIdx.x];
        __stcg(c + i + 7*ldc, dotp);
        dotp = cv[4] + csub[0][9][threadIdx.x];
        __stcg(c + i + 9*ldc, dotp);
        dotp = cv[5] + csub[0][11][threadIdx.x];
        __stcg(c + i + 11*ldc, dotp);
        dotp = cv[6] + csub[0][13][threadIdx.x];
        __stcg(c + i + 13*ldc, dotp);
        dotp = cv[7] + csub[0][15][threadIdx.x];
        __stcg(c + i + 15*ldc, dotp);
        dotp = cv[8] + csub[0][17][threadIdx.x];
        __stcg(c + i + 17*ldc, dotp);
        dotp = cv[9] + csub[0][19][threadIdx.x];
        __stcg(c + i + 19*ldc, dotp);
        dotp = cv[10] + csub[0][21][threadIdx.x];
        __stcg(c + i + 21*ldc, dotp);
        dotp = cv[11] + csub[0][23][threadIdx.x];
        __stcg(c + i + 23*ldc, dotp);
        __barrier_sync(0);
    }
}
